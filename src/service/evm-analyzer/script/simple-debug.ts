import EVMAnalyzer from "..";
import { Address } from "@ethereumjs/util";
//import { parsers } from '../../evm/opcodes/utils';
import { BytecodeAnalyzer } from "../utils/bytecode-analyzer";
import { ContractMetadata } from "../types";
import test_abi from "./test_abi.json";

const contractMetadata: ContractMetadata =
  test_abi as unknown as ContractMetadata;

async function main() {
  const analyzer = await EVMAnalyzer.create();

  try {
    // Your token bytecode
    const tokenBytecode =
      "60806040526040518060400160405280600b81526020017f53696d706c65546f6b656e000000000000000000000000000000000000000000815250600090816200004a91906200045e565b506040518060400160405280600681526020017f53494d504c450000000000000000000000000000000000000000000000000000815250600190816200009191906200045e565b506012600260006101000a81548160ff021916908360ff160217905550600260009054906101000a900460ff16600a620000cc9190620006d5565b620f4240620000dc919062000726565b600355348015620000ec57600080fd5b5033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600354604051620001d6919062000782565b60405180910390a36200079f565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200026657607f821691505b6020821081036200027c576200027b6200021e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002a7565b620002f28683620002a7565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200033f6200033962000333846200030a565b62000314565b6200030a565b9050919050565b6000819050919050565b6200035b836200031e565b620003736200036a8262000346565b848454620002b4565b825550505050565b600090565b6200038a6200037b565b6200039781848462000350565b505050565b5b81811015620003bf57620003b360008262000380565b6001810190506200039d565b5050565b601f8211156200040e57620003d88162000282565b620003e38462000297565b81016020851015620003f3578190505b6200040b620004028562000297565b8301826200039c565b50505b505050565b600082821c905092915050565b6000620004336000198460080262000413565b1980831691505092915050565b60006200044e838362000420565b9150826002028217905092915050565b6200046982620001e4565b67ffffffffffffffff811115620004855762000484620001ef565b5b6200049182546200024d565b6200049e828285620003c3565b600060209050601f831160018114620004d65760008415620004c1578287015190505b620004cd858262000440565b8655506200053d565b601f198416620004e68662000282565b60005b828110156200051057848901518255600182019150602085019450602081019050620004e9565b868310156200053057848901516200052c601f89168262000420565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620005d357808604811115620005ab57620005aa62000545565b5b6001851615620005bb5780820291505b8081029050620005cb8562000574565b94506200058b565b94509492505050565b600082620005ee5760019050620006c1565b81620005fe5760009050620006c1565b8160018114620006175760028114620006225762000658565b6001915050620006c1565b60ff84111562000637576200063662000545565b5b8360020a91508482111562000651576200065062000545565b5b50620006c1565b5060208310610133831016604e8410600b8410161715620006925782820a9050838111156200068c576200068b62000545565b5b620006c1565b620006a1848484600162000581565b92509050818404811115620006bb57620006ba62000545565b5b81810290505b9392505050565b600060ff82169050919050565b6000620006e2826200030a565b9150620006ef83620006c8565b92506200071e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620005dc565b905092915050565b600062000733826200030a565b915062000740836200030a565b925082820262000750816200030a565b915082820484148315176200076a576200076962000545565b5b5092915050565b6200077c816200030a565b82525050565b600060208201905062000799600083018462000771565b92915050565b61251f80620007af6000396000f3fe608060405260043610..."; // Your full bytecode

    // Deploy and analyze the contract
    const contractAddr = new Address(
      Buffer.from("1234567890123456789012345678901234567890", "hex"),
    );

    console.log("Deploying and analyzing token contract with ABI metadata...");

    // Deploy the contract
    await analyzer.deployContractToAddress(
      contractAddr.toString(),
      tokenBytecode,
    );

    // Enhanced analysis with ABI metadata
    const enhancedAnalysis = BytecodeAnalyzer.analyzeWithMetadata(
      tokenBytecode,
      contractMetadata,
    );

    console.log("\n=== ENHANCED CONTRACT ANALYSIS (ABI-DERIVED) ===");
    console.log(
      `Analysis method: ${enhancedAnalysis.abiDerived ? "ABI Metadata" : "Bytecode Analysis"}`,
    );
    console.log(`Functions found: ${enhancedAnalysis.functions.length}`);
    console.log(`Events found: ${enhancedAnalysis.events.length}`);

    console.log("\nFunctions:");
    enhancedAnalysis.functions.forEach((func, index) => {
      console.log(`${index + 1}. ${func.name}`);
      console.log(`   Selector: ${func.selector}`);
      console.log(`   Signature: ${func.signature}`);
      console.log(`   State Mutability: ${func.stateMutability}`);
      if (func.inputs && func.inputs.length > 0) {
        console.log(
          `   Inputs: ${func.inputs.map((i) => `${i.type} ${i.name}`).join(", ")}`,
        );
      }
      if (func.outputs && func.outputs.length > 0) {
        console.log(
          `   Outputs: ${func.outputs.map((o) => `${o.type} ${o.name || ""}`).join(", ")}`,
        );
      }
      console.log("");
    });

    console.log("\nEvents:");
    enhancedAnalysis.events.forEach((event, index) => {
      console.log(`${index + 1}. ${event.name}`);
      console.log(`   Signature: ${event.signature}`);
      console.log(`   Hash: ${event.hash}`);
      console.log(
        `   Inputs: ${event.inputs.map((i) => `${i.type} ${i.name}${i.indexed ? " indexed" : ""}`).join(", ")}`,
      );
      console.log("");
    });

    // Test function calls with accurate selectors
    console.log("\n=== TESTING SPECIFIC FUNCTIONS ===");

    // Test totalSupply (we know the exact selector now)
    const totalSupplyFunc = enhancedAnalysis.functions.find(
      (f) => f.name === "totalSupply",
    );
    if (totalSupplyFunc) {
      console.log(
        `\nCalling ${totalSupplyFunc.name} with selector ${totalSupplyFunc.selector}`,
      );
      // ... rest of your function call logic
    }
  } catch (error) {
    console.error("Error:", error);
  } finally {
    await analyzer.cleanup();
  }
}

main().catch(console.error);
