import EVM from "..";
import { parsers } from "../opcodes/utils";
import { buildTxData } from "../utils";

// This is likely the runtime bytecode (starts after the constructor)
const runtimeBytecode =
  "60806040526040518060400160405280600781526020017f4d79546f6b656e00000000000000000000000000000000000000000000000000815250600090816200004a91906200033c565b506040518060400160405280600381526020017f4d544b0000000000000000000000000000000000000000000000000000000000815250600190816200009191906200033c565b506012600260006101000a81548160ff021916908360ff160217905550348015620000bb57600080fd5b5062000423565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200014457607f821691505b6020821081036200015a5762000159620000fc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001c47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000185565b620001d0868362000185565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200021d620002176200021184620001e8565b620001f2565b620001e8565b9050919050565b6000819050919050565b6200023983620001fc565b62000251620002488262000224565b84845462000192565b825550505050565b600090565b6200026862000259565b620002758184846200022e565b505050565b5b818110156200029d57620002916000826200025e565b6001810190506200027b565b5050565b601f821115620002ec57620002b68162000160565b620002c18462000175565b81016020851015620002d1578190505b620002e9620002e08562000175565b8301826200027a565b50505b505050565b600082821c905092915050565b60006200031160001984600802620002f1565b1980831691505092915050565b60006200032c8383620002fe565b9150826002028217905092915050565b6200034782620000c2565b67ffffffffffffffff811115620003635762000362620000cd565b5b6200036f82546200012b565b6200037c828285620002a1565b600060209050601f831160018114620003b457600084156200039f578287015190505b620003ab85826200031e565b8655506200041b565b601f198416620003c48662000160565b60005b82811015620003ee57848901518255600182019150602085019450602081019050620003c7565b868310156200040e57848901516200040a601f891682620002fe565b8355505b6001600288020188555050505b505050505050565b61093880620004336000396000f3fe6080604052600436106100705760003560e01c806370a082311161004e57806370a08231146100f657806395d89b4114610133578063a9059cbb1461015e578063d0e30db01461019b57610070565b806306fdde031461007557806318160ddd146100a0578063313ce567146100cb575b600080fd5b34801561008157600080fd5b5061008a6101a5565b60405161009791906105e0565b60405180910390f35b3480156100ac57600080fd5b506100b5610233565b6040516100c2919061061b565b60405180910390f35b3480156100d757600080fd5b506100e0610239565b6040516100ed9190610652565b60405180910390f35b34801561010257600080fd5b5061011d600480360381019061011891906106d0565b61024c565b60405161012a919061061b565b60405180910390f35b34801561013f57600080fd5b50610148610264565b60405161015591906105e0565b60405180910390f35b34801561016a57600080fd5b5061018560048036038101906101809190610729565b6102f2565b6040516101929190610784565b60405180910390f35b6101a3610491565b005b600080546101b2906107ce565b80601f01602080910402602001604051908101604052809291908181526020018280546101de906107ce565b801561022b5780601f106102005761010080835404028352916020019161022b565b820191906000526020600020905b81548152906001019060200180831161020e57829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b60018054610271906107ce565b80601f016020809104026020016040519081016040528092919081815260200182805461029d906107ce565b80156102ea5780601f106102bf576101008083540402835291602001916102ea565b820191906000526020600020905b8154815290600101906020018083116102cd57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036d9061084b565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103c5919061089a565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461041b91906108ce565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161047f919061061b565b60405180910390a36001905092915050565b34600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104e091906108ce565b9250508190555034600360008282546104f991906108ce565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c34604051610546919061061b565b60405180910390a2565b600081519050919050565b600082825260208201905092915050565b60005b8381101561058a57808201518184015260208101905061056f565b60008484015250505050565b6000601f19601f8301169050919050565b60006105b282610550565b6105bc818561055b565b93506105cc81856020860161056c565b6105d581610596565b840191505092915050565b600060208201905081810360008301526105fa81846105a7565b905092915050565b6000819050919050565b61061581610602565b82525050565b6000602082019050610630600083018461060c565b92915050565b600060ff82169050919050565b61064c81610636565b82525050565b60006020820190506106676000830184610643565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069d82610672565b9050919050565b6106ad81610692565b81146106b857600080fd5b50565b6000813590506106ca816106a4565b92915050565b6000602082840312156106e6576106e561066d565b5b60006106f4848285016106bb565b91505092915050565b61070681610602565b811461071157600080fd5b50565b600081359050610723816106fd565b92915050565b600080604083850312156107405761073f61066d565b5b600061074e858286016106bb565b925050602061075f85828601610714565b9150509250929050565b60008115159050919050565b61077e81610769565b82525050565b60006020820190506107996000830184610775565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107e657607f821691505b6020821081036107f9576107f861079f565b5b50919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061083560148361055b565b9150610840826107ff565b602082019050919050565b6000602082019050818103600083015261086481610828565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108a582610602565b91506108b083610602565b92508282039050818111156108c8576108c761086b565b5b92915050565b60006108d982610602565b91506108e483610602565b92508282019050808211156108fc576108fb61086b565b5b9291505056fea2646970667358221220b8654a4e3949ba31d59d220b8a7bb320d649e8c15ec0f1b262a27c64050b3fa964736f6c63430008120033";

const evm = new EVM({
  debug: true, // Turn off debug for now
  saveLogs: true,
});

console.log("Testing contract with different approaches...");

// Test 1: Call deposit function
console.log("Test 1: Calling deposit function");
try {
  const result1 = await evm.start({
    _code: parsers.hexStringToUint8Array(runtimeBytecode),
    _txData: buildTxData({
      tx: {
        from: "0x1234567890123456789012345678901234567890",
        to: "0xabcdefabcdefabcdefabcdefabcdefabcdefabcdef",
        data: "d0e30db0", // deposit() function selector
        value: 1000000000000000000n,
      },
      name: "",
      code: { asm: "", bin: "" },
      expect: {},
    }),
  });
  console.log("Deposit call result:", result1);
} catch (error) {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-expect-error
  console.log("Deposit call failed:", error.message);
}

// // Test 2: Send ETH without function call (should hit fallback)
// console.log('\nTest 2: Sending ETH without function call');
// try {
//   const result2 = await evm.start({
//     _code: parsers.hexStringToUint8Array(runtimeBytecode),
//     _txData: buildTxData({
//       tx: {
//         from: '0x1234567890123456789012345678901234567890',
//         to: '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdef',
//         data: '', // No function call
//         value: BigInt(1000000000000000000),
//       },
//       name: '',
//       code: { asm: '', bin: '' },
//       expect: {},
//     }),
//   });
//   console.log('ETH send result:', result2);
// } catch (error) {
//   // eslint-disable-next-line @typescript-eslint/ban-ts-comment
//   // @ts-expect-error
//   console.log('ETH send failed:', error.message);
// }

// // Test 3: Call name() function (should be simpler)
// console.log('\nTest 3: Calling name() function');
// try {
//   const result3 = await evm.start({
//     _code: parsers.hexStringToUint8Array(runtimeBytecode),
//     _txData: buildTxData({
//       tx: {
//         from: '0x1234567890123456789012345678901234567890',
//         to: '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdef',
//         data: '06fdde03', // name() function selector
//         value: BigInt(0),
//       },
//       name: '',
//       code: { asm: '', bin: '' },
//       expect: {},
//     }),
//   });
//   console.log('Name call result:', result3);
// } catch (error) {
//   // eslint-disable-next-line @typescript-eslint/ban-ts-comment
//   // @ts-expect-error
//   console.log('Name call failed:', error.message);
// }
