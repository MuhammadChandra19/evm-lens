import EVM from '..';
import { parsers } from '../opcodes/utils';
import { buildTxData } from '../utils';

// Simple contract that just stores and returns a value
const simpleContract =
  '608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100a1565b60405180910390f35b610073600480360381019061006e91906100ed565b61007e565b005b60008054905090565b8060008190555050565b6000819050919050565b61009b81610088565b82525050565b60006020820190506100b66000830184610092565b92915050565b600080fd5b6100ca81610088565b81146100d557600080fd5b50565b6000813590506100e7816100c1565b92915050565b600060208284031215610103576101026100bc565b5b6000610111848285016100d8565b9150509291505056fea2646970667358221220a1b2c3d4e5f6789012345678901234567890123456789012345678901234567890abcdef64736f6c63430008120033';

const evm = new EVM({
  debug: true, // Turn off debug to see just the result
  saveLogs: false,
});

console.log('Testing simple contract...');

const result = await evm.start({
  _code: parsers.hexStringToUint8Array(simpleContract),
  _txData: buildTxData({
    tx: {
      from: '0x1234567890123456789012345678901234567890',
      to: '0xabcdefabcdefabcdefabcdefabcdefabcdefabcdef',
      data: '6057361d0000000000000000000000000000000000000000000000000000000000000042', // store(66)
      value: 0n,
    },
    name: '',
    code: { asm: '', bin: '' },
    expect: {},
  }),
});

console.log('Simple contract result:', result);
